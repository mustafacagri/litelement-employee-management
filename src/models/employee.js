/**
 * Class representing an Employee model
 */
import { PHONE, DEPARTMENTS, POSITIONS } from '@constants'

export class Employee {
	/**
	 * Create an employee
	 *
	 * @param {Object} data - The employee data
	 * @param {string} [data.id] - Unique identifier (autogenerated if not provided)
	 * @param {string} data.firstName - First name
	 * @param {string} data.lastName - Last name
	 * @param {string} data.dateOfEmployment - Date of employment (ISO string)
	 * @param {string} data.dateOfBirth - Date of birth (ISO string)
	 * @param {string} data.phoneCode - Phone country code (e.g. '90' for Turkey)
	 * @param {string} data.phoneNumber - Phone number without country code
	 * @param {string} data.email - Email address
	 * @param {string} data.department - Department (Analytics, Tech)
	 * @param {string} data.position - Position (Junior, Medior, Senior)
	 */
	constructor(data = {}) {
		this.id = data.id || this._generateId()
		this.firstName = data.firstName || ''
		this.lastName = data.lastName || ''
		this.dateOfEmployment = data.dateOfEmployment || ''
		this.dateOfBirth = data.dateOfBirth || ''
		this.phoneCode = data.phoneCode || PHONE.DEFAULT_COUNTRY_CODE
		this.phoneNumber = data.phoneNumber || ''
		this.email = data.email || ''
		this.department = data.department || ''
		this.position = data.position || ''
	}

	/**
	 * Get full name of employee
	 *
	 * @returns {string} Full name (firstName + lastName)
	 */
	get fullName() {
		return `${this.firstName} ${this.lastName}`.trim()
	}

	/**
	 * Generate a unique ID
	 *
	 * @returns {string} Generated ID
	 * @private
	 */
	_generateId() {
		return window?.crypto?.randomUUID() || Date.now().toString(36) + Math.random().toString(36).substring(2)
	}

	/**
	 * Converts the object to a plain JavaScript object
	 *
	 * @returns {Object} Plain object representation
	 */
	toJSON() {
		return {
			id: this.id,
			firstName: this.firstName,
			lastName: this.lastName,
			dateOfEmployment: this.dateOfEmployment,
			dateOfBirth: this.dateOfBirth,
			phoneCode: this.phoneCode,
			phoneNumber: this.phoneNumber,
			email: this.email,
			department: this.department,
			position: this.position,
		}
	}

	/**
	 * Creates an Employee instance from a plain object
	 *
	 * @param {Object} data - Plain object with employee data
	 * @returns {Employee} New Employee instance
	 */
	static fromJSON(data) {
		return new Employee(data)
	}

	/**
	 * Creates a deep copy of the employee
	 *
	 * @returns {Employee} A new Employee instance with the same data
	 */
	clone() {
		return Employee.fromJSON(this.toJSON())
	}

	/**
	 * Returns default departments for the application
	 *
	 * @returns {Array<string>} List of department values
	 */
	static get departments() {
		return Object.values(DEPARTMENTS).map((val) => val.toLowerCase())
	}

	/**
	 * Returns default positions for the application
	 *
	 * @returns {Array<string>} List of position values
	 */
	static get positions() {
		return Object.values(POSITIONS).map((val) => val.toLowerCase())
	}

	/**
	 * Get full phone number with country code
	 *
	 * @returns {string} Full phone number with country code format
	 */
	get fullPhoneNumber() {
		if (!this.phoneNumber) return ''
		const format = PHONE.FORMAT.DISPLAY.replace('{code}', this.phoneCode).replace('{number}', this.phoneNumber)
		return format
	}

	/**
	 * Set phone number from a full format (with country code)
	 *
	 * @param {string} fullNumber - Full phone number including country code
	 */
	setFullPhoneNumber(fullNumber) {
		if (!fullNumber) {
			this.phoneCode = PHONE.DEFAULT_COUNTRY_CODE
			this.phoneNumber = ''
			return
		}

		// Extract country code and number from +(XX) XXX XXX XX XX format
		const match = fullNumber.match(/\+\((\d+)\)\s*(.+)/)
		if (match) {
			this.phoneCode = match[1]
			this.phoneNumber = match[2]
		} else {
			// If no match, just set the phoneNumber and use default code
			this.phoneNumber = fullNumber
		}
	}
}
